import kotlin.math.PI
import kotlin.math.sqrt

fun main() 
{
    val squareCabin = squareCabin(6,50.0)
    val roundHut = RoundHut(3,10.0)
    val RoundTower = RoundTower(4,15.5)
    
    with(squareCabin)
    {
        println("\nSquare Cabin\n============")
    	println("Capacity: ${squareCabin.capacity}")
    	println("Material: ${squareCabin.buildingMaterial}")
    	println("Has room? ${squareCabin.hasRoom()}")
        println("Floor area: ${floorArea()}")
    }
    
    with(roundHut) 
    {
    println("\nRound Hut\n=========")
    println("Material: ${buildingMaterial}")
    println("Capacity: ${capacity}")
    println("Has room? ${hasRoom()}")
    getRoom()
    println("Has room? ${hasRoom()}")
    getRoom()
    println("Floor area: ${floorArea()}")
    println("Carpet size: ${calculateMaxCarpetSize()}")
	}
    
    with(RoundTower) 
    {
    println("\nRound Tower\n==========")
    println("Material: ${buildingMaterial}")
    println("Capacity: ${capacity}")
    println("Has room? ${hasRoom()}")
    println("Floor area: ${floorArea()}")
    println("Carpet size: ${calculateMaxCarpetSize()}")
	}
        
}
//parent class
abstract class Dwelling(private var residents: Int)
{
    abstract val buildingMaterial: String
    abstract val capacity: Int
    
    fun hasRoom():Boolean
    {
        return residents < capacity
    }
    
    abstract fun floorArea():Double
    
    fun getRoom()
    {
        if (capacity > residents)
        {
            residents++
            println("You got a room!")
        }else
        {
            println("Sorry, capacity full.")
        }
    }
    
}
//sub class
class squareCabin(residents: Int, val length:Double) : Dwelling(residents)
{
    override val buildingMaterial = "Wood"
    override val capacity = 6 
    override fun floorArea():Double
    {
        return length*length
    }
}
//sub class
//open cuz it is accessed by class round tower
open class RoundHut(val resident: Int, val radius:Double) : Dwelling(resident)
{
    override val buildingMaterial ="Straw"
    override val capacity = 4
    
    override fun floorArea():Double
    {
        return PI * radius * radius
    }
    
    fun calculateMaxCarpetSize():Double
    {
        val diameter = 2 * radius
        return sqrt(diameter * diameter / 2)
    }
}
//subclass
class RoundTower(residents: Int, radius:Double, val floors:Int = 2) : RoundHut(residents, radius)
{
    override val buildingMaterial = "Stone"
    override val capacity = 4 * floors
    
    override fun floorArea():Double
    {
        return super.floorArea() * floors
    }
}
